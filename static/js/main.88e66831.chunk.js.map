{"version":3,"sources":["Components/Header.js","AppContext.js","Components/FolderListMain.js","Components/NoteListMain.js","Components/FolderSideBar.js","Components/NoteSideBar.js","Components/FolderMain.js","Components/NoteMain.js","Components/AddFolder.js","Components/AddNote.js","Components/FolderListError.js","Components/NoteListError.js","App.js","index.js"],"names":["Header","className","to","AppContext","createContext","folders","notes","handleDeleteNote","handleAddFolder","handleAddNote","displayName","propTypes","PropTypes","array","func","FolderListMain","Consumer","map","folder","id","name","NoteListMain","noteId","urlDelete","fetch","method","headers","then","response","ok","Error","status","context","catch","error","console","log","noteArray","this","note","date","Date","modified","dateNormalizer","format","onClick","Component","contextType","FolderSideBar","activeClassName","NoteSideBar","currentNoteId","props","match","params","currentFolderId","find","folderId","currentFolder","history","goBack","FolderMain","filter","length","NoteMain","handleDelete","toISOString","content","AddFolder","state","folderName","folderNameValue","e","setState","target","value","preventDefault","body","JSON","stringify","json","event","Promise","reject","responseJson","alert","folderValidator","updateForm","onSubmit","htmlFor","onChange","touched","disabled","defaultProps","AddNote","folderOptions","handleModified","iso","nameValidator","contentValidator","placeholder","rows","cols","FolderListError","hasError","children","withRouter","NoteListError","App","fetchFolders","data","message","fetchNotes","filteredNotes","Provider","path","exact","component","Fragment","ReactDOM","render","document","getElementById"],"mappings":"6YAgBeA,G,MAZA,WACb,OACE,wBAAQC,UAAU,YAAlB,SACE,6BACE,cAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,aAAvB,2B,iBCLFE,EAAaC,wBAAc,CAC/BC,QAAS,GACTC,MAAO,GACPC,iBAAkB,aAClBC,gBAAiB,aACjBC,cAAe,eAGjBN,EAAWO,YAAc,aAEzBP,EAAWQ,UAAY,CACrBN,QAASO,IAAUC,MACnBP,MAAOM,IAAUC,MACjBN,iBAAkBK,IAAUE,KAC5BN,gBAAiBI,IAAUE,KAC3BL,cAAeG,IAAUE,MAGZX,QCSAY,G,MAzBQ,WACrB,OACE,cAAC,EAAWC,SAAZ,UACG,gBAAGX,EAAH,EAAGA,QAAH,OACC,sBAAKJ,UAAU,aAAf,UACGI,EAAQY,KAAI,SAACC,GACZ,OACE,cAAC,IAAD,CAEEhB,GAAE,kBAAagB,EAAOC,IACtBlB,UAAU,aAHZ,SAKGiB,EAAOE,MAJHF,EAAOC,OAQlB,cAAC,IAAD,CAAMjB,GAAG,aAAT,SACE,wBAAQD,UAAU,gBAAlB,kC,QChBNoB,G,kNAGJd,iBAAmB,SAACe,GAClB,IAAMC,EAAS,sCAAkCD,GACjDE,MAAMD,EAAW,CACfE,OAAQ,SACRC,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAEzB,EAAKC,QAAQzB,iBAAiBe,MAGjCW,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,O,uDAGxB,IAAD,OAEHG,EADcC,KAAKN,QAAf1B,MACcW,KAAI,SAACsB,GACzB,IAAIC,EAAO,IAAIC,KAAKF,EAAKG,UACrBC,EAAiBC,YAAOJ,EAAM,eAElC,OACE,oBAAIvC,UAAU,OAAd,SACE,sBAAKA,UAAU,WAAf,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMC,GAAE,gBAAWqC,EAAKpB,IAAxB,SAA+BoB,EAAKnB,SAEtC,8CAAiBuB,KACjB,wBACE1C,UAAU,gBACV4C,QAAS,kBAAM,EAAKtC,iBAAiBgC,EAAKpB,KAF5C,wBANsBoB,EAAKpB,OAiBnC,OACE,sBAAKlB,UAAU,UAAf,UACE,oBAAIA,UAAU,WAAd,SAA0BoC,IAC1B,cAAC,IAAD,CAAMnC,GAAG,WAAT,SACE,wBAAQD,UAAU,aAAlB,+B,GAjDiB6C,cAArBzB,EACG0B,YAAc5C,EAuDRkB,QChCA2B,EA1BO,WACpB,OACE,cAAC,EAAWhC,SAAZ,UACG,gBAAGX,EAAH,EAAGA,QAAH,OACC,sBAAKJ,UAAU,aAAf,UACGI,EAAQY,KAAI,SAACC,GACZ,OACE,cAAC,IAAD,CAEEhB,GAAE,kBAAagB,EAAOC,IACtBlB,UAAU,aACVgD,gBAAgB,WAJlB,SAMG/B,EAAOE,MALHF,EAAOC,OASlB,cAAC,IAAD,CAAMjB,GAAG,aAAT,SACE,wBAAQD,UAAU,gBAAlB,iCCjBNiD,G,6KAGM,IAAD,SACoBZ,KAAKN,QAAxB3B,EADD,EACCA,QAASC,EADV,EACUA,MACb6C,EAAgBb,KAAKc,MAAMC,MAAMC,OAAOhC,OAIxCiC,GAHcjD,EAAMkD,MAAK,SAACjB,GAAD,OAAUA,EAAKpB,KAAOgC,MAAkB,CACnEM,SAAU,KAEsBA,SAC9BC,EAAgBrD,EAAQmD,MAC1B,SAACtC,GAAD,OAAYA,EAAOC,KAAOoC,MACvB,CAAEnC,KAAM,IAEb,OACE,sBAAKnB,UAAU,cAAf,UACE,6BAAKyD,EAActC,OACnB,wBAAQnB,UAAU,UAAU4C,QAAS,kBAAM,EAAKO,MAAMO,QAAQC,UAA9D,yB,GAjBkBd,cAApBI,EACGH,YAAc5C,EA6BR+C,QC5BTW,G,kNAGJtD,iBAAmB,SAACe,GAClB,IAAMC,EAAS,sCAAkCD,GACjDE,MAAMD,EAAW,CACfE,OAAQ,SACRC,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAEzB,EAAKC,QAAQzB,iBAAiBe,MAGjCW,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,O,uDAGxB,IAAD,OACC5B,EAAUgC,KAAKN,QAAf1B,MACJmD,EAAWnB,KAAKc,MAAMC,MAAMC,OAAOG,SAEjCpB,EADiB/B,EAAMwD,QAAO,SAACvB,GAAD,OAAUA,EAAKkB,WAAaA,KAC/BxC,KAAI,SAACsB,GACpC,IAAIC,EAAO,IAAIC,KAAKF,EAAKG,UACrBC,EAAiBC,YAAOJ,EAAM,eAElC,OACE,oBAAIvC,UAAU,OAAd,SACE,sBAAKA,UAAU,WAAf,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMC,GAAE,gBAAWqC,EAAKpB,IAAxB,SAA+BoB,EAAKnB,SAEtC,8CAAiBuB,KACjB,wBACE1C,UAAU,gBACV4C,QAAS,kBAAM,EAAKtC,iBAAiBgC,EAAKpB,KAF5C,wBANsBoB,EAAKpB,OAiBnC,OACE,sBAAKlB,UAAU,UAAf,UACwB,IAArBoC,EAAU0B,QAAgB,6CAC3B,oBAAI9D,UAAU,WAAd,SAA0BoC,IAC1B,cAAC,IAAD,CAAMnC,GAAG,WAAT,SACE,wBAAQD,UAAU,aAAlB,+B,GApDe6C,cAAnBe,EACGd,YAAc5C,EA8DR0D,QChETG,G,kNAGJC,aAAe,SAAC3C,GACd,IAAMC,EAAS,sCAAkCD,GACjDE,MAAMD,EAAW,CACfE,OAAQ,SACRC,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAEzB,EAAKC,QAAQzB,iBAAiBe,MAGjCK,MAAK,kBAAM,EAAKyB,MAAMO,QAAQC,YAC9B3B,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,O,uDAGxB,IAAD,OACC5B,EAAUgC,KAAKN,QAAf1B,MACFgB,EAASgB,KAAKc,MAAMC,MAAMC,OAAOhC,OACnCiB,EAAOjC,EAAMkD,MAAK,SAACjB,GAAD,OAAUA,EAAKpB,KAAOG,MAAW,CACrDH,GAAIG,EACJoB,UAAU,IAAID,MAAOyB,eAGnB1B,EAAO,IAAIC,KAAKF,EAAKG,UACrBC,EAAiBC,YAAOJ,EAAM,eAElC,OACE,0BAASvC,UAAU,eAAnB,UACE,qBAAKA,UAAU,YAAf,SACE,6BAAKsC,EAAKnB,SAEZ,qBAAKnB,UAAU,WAAf,SACE,8CAAiB0C,OAEnB,qBAAK1C,UAAU,aAAf,SAA6BsC,EAAK4B,UAClC,wBACElE,UAAU,YACV4C,QAAS,kBAAM,EAAKoB,aAAa1B,EAAKpB,KAFxC,2B,GA1Ce2B,cAAjBkB,EACGjB,YAAc5C,EAwDR6D,Q,QC1DTI,G,kNAIJC,MAAQ,CAAEC,WAAY,I,EAItBC,gBAAkB,SAACC,GACjB,EAAKC,SAAS,CAAEH,WAAYE,EAAEE,OAAOC,S,EAGvCnE,gBAAkB,SAACgE,GACjBA,EAAEI,iBAEFpD,MADS,gCACE,CACTC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBmD,KAAMC,KAAKC,UAAU,CAAE3D,KAAM,EAAKiD,MAAMC,eAEvC3C,MAAK,SAACC,GACL,OAAKA,EAASC,GAGLD,EAASoD,OAFTpD,EAASoD,OAAOrD,MAAK,SAACsD,GAAD,OAAWC,QAAQC,OAAOF,SAKzDtD,MAAK,SAACyD,GACL,EAAKpD,QAAQxB,gBAAgB4E,GAC7B,EAAKX,SAAS,CAAEH,WAAY,KAC5B,EAAKlB,MAAMO,QAAQC,YAEpB3B,OAAM,kBAAMoD,MAAM,4B,EAGvBC,gBAAkB,WAChB,GAA8B,KAA1B,EAAKjB,MAAMC,WACb,OAAO,G,EAIXiB,WAAa,SAACN,GAAW,IAAD,EACtB,EAAKR,UAAL,mBAAiBQ,EAAMP,OAAOvD,GAAK8D,EAAMP,OAAOC,OAAhD,yBAAgE,GAAhE,K,uDAGQ,IAAD,OACP,OACE,sBAAK1E,UAAU,eAAf,UACE,uBACEA,UAAU,gBACVuF,SAAU,SAAChB,GAAD,OAAO,EAAKhE,gBAAgBgE,IAFxC,UAIE,uBAAOiB,QAAQ,YAAf,yBACA,uBACExF,UAAU,YACVmB,KAAK,YACLD,GAAG,aACHuE,SAAUpD,KAAKiD,aAEhBjD,KAAKgD,mBAAqBhD,KAAK+B,MAAMsB,SACpC,mBAAG1F,UAAU,aAAb,yCAEF,wBAAQA,UAAU,SAAS2F,SAAUtD,KAAKgD,kBAA1C,2BAIF,wBAAQrF,UAAU,UAAU4C,QAASP,KAAKc,MAAMO,QAAQC,OAAxD,4B,GApEgBd,cAAlBsB,EACGyB,aAAe,CACpBlC,QAAS,CAAEC,OAAQ,eAFjBQ,EAMGrB,YAAc5C,EA2ERiE,QCjFT0B,G,kNAIJzB,MAAQ,CACNjD,KAAM,GACN+C,QAAS,GACTV,SAAU,GACVf,SAAU,GACViD,SAAS,G,EAKXJ,WAAa,SAACN,GAAW,IAAD,EACtB,EAAKR,UAAL,mBAAiBQ,EAAMP,OAAOvD,GAAK8D,EAAMP,OAAOC,OAAhD,yBAAgE,GAAhE,K,EAGFlE,cAAgB,SAAC+D,GACfA,EAAEI,iBAEFpD,MADS,8BACE,CACTC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBmD,KAAMC,KAAKC,UAAU,CACnB3D,KAAM,EAAKiD,MAAMjD,KACjB+C,QAAS,EAAKE,MAAMF,QACpBV,SAAU,EAAKY,MAAMZ,SACrBf,SAAU,EAAK2B,MAAM3B,aAGtBf,MAAK,SAACC,GACL,OAAKA,EAASC,GAGLD,EAASoD,OAFTpD,EAASoD,OAAOrD,MAAK,SAACsD,GAAD,OAAWC,QAAQC,OAAOF,SAKzDtD,MAAK,SAACyD,GACL,EAAKpD,QAAQvB,cAAc2E,GAC3B,EAAKhC,MAAMO,QAAQC,YAEpB3B,OAAM,kBACLoD,MACE,qG,EAKRU,cAAgB,WAQd,OAPc,EAAK/D,QAAQ3B,QAAQY,KAAI,SAACC,GACtC,OACE,wBAAwByD,MAAOzD,EAAOC,GAAtC,SACGD,EAAOE,MADGF,EAAOC,Q,EAQ1B6E,eAAiB,WACf,IACIC,GADQ,IAAIxD,MACAyB,cAChB,EAAKO,SAAS,CAAE/B,SAAUuD,K,EAO5BC,cAAgB,WACd,GAAwB,KAApB,EAAK7B,MAAMjD,KACb,OAAO,G,EAIX+E,iBAAmB,WACjB,GAA2B,KAAvB,EAAK9B,MAAMF,QACb,OAAO,G,EAIXmB,gBAAkB,WAChB,GAA4B,KAAxB,EAAKjB,MAAMZ,SACb,OAAO,G,kEAjBTnB,KAAK0D,mB,+BAqBG,IAAD,OACP,OACE,sBAAK/F,UAAU,aAAf,UACE,uBAAMA,UAAU,cAAcuF,SAAU,SAAChB,GAAD,OAAO,EAAK/D,cAAc+D,IAAlE,UACE,uBAAOiB,QAAQ,gBAAf,wBACA,uBACExF,UAAU,gBACVkB,GAAG,OACHC,KAAK,gBACLgF,YAAY,kBACZV,SAAU,SAAClB,GAAD,OAAO,EAAKe,WAAWf,MAElClC,KAAK4D,iBAAmB5D,KAAK+B,MAAMsB,SAClC,mBAAG1F,UAAU,aAAb,yCAEF,uBAAOwF,QAAQ,aAAf,2BACA,0BACExF,UAAU,aACVkB,GAAG,UACHC,KAAK,aACLiF,KAAK,IACLC,KAAK,KACLF,YAAY,wBACZV,SAAU,SAAClB,GAAD,OAAO,EAAKe,WAAWf,MAEnC,yBACEpD,KAAK,SACLD,GAAG,WACHuE,SAAU,SAAClB,GAAD,OAAO,EAAKe,WAAWf,IAHnC,UAKE,mDACClC,KAAKyD,mBAER,8BACE,wBACE9F,UAAU,aACV2F,SACEtD,KAAK4D,iBACL5D,KAAK6D,oBACL7D,KAAKgD,kBALT,8BAYJ,wBAAQrF,UAAU,UAAU4C,QAASP,KAAKc,MAAMO,QAAQC,OAAxD,4B,GAxIcd,cAAhBgD,EACGD,aAAe,CACpBlC,QAAS,CAAEC,OAAQ,eAFjBkC,EAYG/C,YAAc5C,EA4IR2F,QCzJTS,E,4MACJlC,MAAQ,CAAEmC,UAAU,G,uDAOlB,OAAIlE,KAAK+B,MAAMmC,SAEX,qBAAKvG,UAAU,WAAf,SACE,6FAICqC,KAAKc,MAAMqD,Y,gDAZYvE,GAC9B,MAAO,CAAEsE,UAAU,O,GAJO1D,aAuBf4D,cAAWH,GCvBpBI,E,4MACJtC,MAAQ,CAAEmC,UAAU,G,uDAOlB,OAAIlE,KAAK+B,MAAMmC,SAEX,qBAAKvG,UAAU,WAAf,SACE,2FAICqC,KAAKc,MAAMqD,Y,gDAZYvE,GAC9B,MAAO,CAAEsE,UAAU,O,GAJK1D,aAuBb4D,cAAWC,GCyFXC,E,4MAnGbvC,MAAQ,CACNhE,QAAS,GACTC,MAAO,I,EAGTuG,aAAe,WAEbrF,MADU,iCAEPG,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAASoD,OAElB,MAAM,IAAIlD,MAAMF,EAASG,WAE1BJ,MAAK,SAACmF,GACL,EAAKrC,SAAS,CAAEpE,QAASyG,OAE1B7E,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,EAAM6E,a,EAGxCC,WAAa,WAEXxF,MADU,+BAEPG,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAASoD,OAElB,MAAM,IAAIlD,MAAMF,EAASG,WAE1BJ,MAAK,SAACmF,GACL,EAAKrC,SAAS,CAAEnE,MAAOwG,OAExB7E,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,EAAM6E,a,EAGxCxG,iBAAmB,SAACe,GAClB,IAAI2F,EAAgB,EAAK5C,MAAM/D,MAAMwD,QAAO,SAACvB,GAAD,OAAUA,EAAKpB,KAAOG,KAClE,EAAKmD,SAAS,CAAEnE,MAAO2G,K,EAGzBzG,gBAAkB,SAACU,GACjB,EAAKuD,SAAS,CAAEpE,QAAQ,GAAD,mBAAM,EAAKgE,MAAMhE,SAAjB,CAA0Ba,O,EAGnDT,cAAgB,SAAC8B,GACf,EAAKkC,SAAS,CAAEnE,MAAM,GAAD,mBAAM,EAAK+D,MAAM/D,OAAjB,CAAwBiC,O,kEAI7CD,KAAKuE,eACLvE,KAAK0E,e,+BAIL,OACE,uBAAM/G,UAAU,MAAhB,UACE,cAAC,EAAD,IACA,cAAC,EAAWiH,SAAZ,CACEvC,MAAO,CACLtE,QAASiC,KAAK+B,MAAMhE,QACpBC,MAAOgC,KAAK+B,MAAM/D,MAClBC,iBAAkB+B,KAAK/B,iBACvBC,gBAAiB8B,KAAK9B,gBACtBC,cAAe6B,KAAK7B,eANxB,SASE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO0G,KAAK,aAAaC,OAAK,EAACC,UAAWjD,IAC1C,cAAC,IAAD,CAAO+C,KAAK,WAAWC,OAAK,EAACC,UAAWvB,IACxC,cAAC,IAAMwB,SAAP,UACE,sBAAKrH,UAAU,UAAf,UACE,yBAASA,UAAU,aAAnB,SACE,eAAC,EAAD,WACE,cAAC,IAAD,CAAOkH,KAAK,IAAIC,OAAK,EAACC,UAAWtG,IACjC,cAAC,IAAD,CAAOoG,KAAK,oBAAoBE,UAAWrE,IAC3C,cAAC,IAAD,CAAOmE,KAAK,gBAAgBE,UAAWnE,SAG3C,yBAASjD,UAAU,cAAnB,SACE,eAAC,EAAD,WACE,cAAC,IAAD,CAAOkH,KAAK,IAAIC,OAAK,EAACC,UAAWhG,IACjC,cAAC,IAAD,CAAO8F,KAAK,oBAAoBE,UAAWxD,IAC3C,cAAC,IAAD,CAAOsD,KAAK,gBAAgBE,UAAWrD,0B,GAnFzClB,aCVlByE,IAASC,OAEN,cAAC,IAAD,UACC,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.88e66831.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"headerBox\">\r\n      <h1>\r\n        <Link to=\"/\" className=\"headerText\">\r\n          Noteful\r\n        </Link>\r\n      </h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { createContext } from \"react\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst AppContext = createContext({\r\n  folders: [],\r\n  notes: [],\r\n  handleDeleteNote: () => {},\r\n  handleAddFolder: () => {},\r\n  handleAddNote: () => {},\r\n});\r\n\r\nAppContext.displayName = \"AppContext\";\r\n\r\nAppContext.propTypes = {\r\n  folders: PropTypes.array,\r\n  notes: PropTypes.array,\r\n  handleDeleteNote: PropTypes.func,\r\n  handleAddFolder: PropTypes.func,\r\n  handleAddNote: PropTypes.func,\r\n}\r\n\r\nexport default AppContext;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AppContext from \"../AppContext\";\r\nimport \"./FolderListMain.css\";\r\n\r\nconst FolderListMain = () => {\r\n  return (\r\n    <AppContext.Consumer>\r\n      {({ folders }) => (\r\n        <div className=\"folderList\">\r\n          {folders.map((folder) => {\r\n            return (\r\n              <Link\r\n                key={folder.id}\r\n                to={`/folder/${folder.id}`}\r\n                className=\"folderLink\"\r\n              >\r\n                {folder.name}\r\n              </Link>\r\n            );\r\n          })}\r\n          <Link to=\"/addFolder\">\r\n            <button className=\"folderListBtn\">Add Folder</button>\r\n          </Link>\r\n        </div>\r\n      )}\r\n    </AppContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default FolderListMain;\r\n","import React, { Component } from \"react\";\r\nimport { format } from \"date-fns\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AppContext from \"../AppContext\";\r\nimport \"./NoteListMain.css\";\r\n\r\nclass NoteListMain extends Component {\r\n  static contextType = AppContext;\r\n\r\n  handleDeleteNote = (noteId) => {\r\n    const urlDelete = `http://localhost:9090/notes/${noteId}`;\r\n    fetch(urlDelete, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(response.status);\r\n        } else {\r\n          this.context.handleDeleteNote(noteId);\r\n        }\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  render() {\r\n    const { notes } = this.context;\r\n    let noteArray = notes.map((note) => {\r\n      let date = new Date(note.modified);\r\n      let dateNormalizer = format(date, \"do LLL yyyy\");\r\n\r\n      return (\r\n        <li className=\"note\" key={note.id}>\r\n          <div className=\"noteItem\">\r\n            <h2 className=\"noteName\">\r\n              <Link to={`/note/${note.id}`}>{note.name}</Link>\r\n            </h2>\r\n            <p>Last change: {dateNormalizer}</p>\r\n            <button\r\n              className=\"deleteNoteBtn\"\r\n              onClick={() => this.handleDeleteNote(note.id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"noteBox\">\r\n        <ul className=\"noteList\">{noteArray}</ul>\r\n        <Link to=\"/addNote\">\r\n          <button className=\"addNoteBtn\">Add Note</button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default NoteListMain;\r\n","import React from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\nimport AppContext from \"../AppContext\";\r\n\r\nconst FolderSideBar = () => {\r\n  return (\r\n    <AppContext.Consumer>\r\n      {({ folders }) => (\r\n        <div className=\"folderList\">\r\n          {folders.map((folder) => {\r\n            return (\r\n              <NavLink\r\n                key={folder.id}\r\n                to={`/folder/${folder.id}`}\r\n                className=\"folderLink\"\r\n                activeClassName=\"selected\"\r\n              >\r\n                {folder.name}\r\n              </NavLink>\r\n            );\r\n          })}\r\n          <Link to=\"/addFolder\">\r\n            <button className=\"folderListBtn\">Add Folder</button>\r\n          </Link>\r\n        </div>\r\n      )}\r\n    </AppContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default FolderSideBar;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport AppContext from \"../AppContext\";\r\nimport \"./NoteSideBar.css\";\r\n\r\nclass NoteSideBar extends Component {\r\n  static contextType = AppContext;\r\n\r\n  render() {\r\n    const { folders, notes } = this.context;\r\n    let currentNoteId = this.props.match.params.noteId;\r\n    let currentNote = notes.find((note) => note.id === currentNoteId) || {\r\n      folderId: \"\",\r\n    };\r\n    let currentFolderId = currentNote.folderId;\r\n    let currentFolder = folders.find(\r\n      (folder) => folder.id === currentFolderId\r\n    ) || { name: \"\" };\r\n\r\n    return (\r\n      <div className=\"noteSideBar\">\r\n        <h2>{currentFolder.name}</h2>\r\n        <button className=\"backBtn\" onClick={() => this.props.history.goBack()}>\r\n          Back\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nNoteSideBar.propTypes = {\r\n  currentNoteId: PropTypes.string,\r\n  currentFolderId: PropTypes.string\r\n};\r\n\r\nexport default NoteSideBar;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { format } from \"date-fns\";\r\nimport AppContext from \"../AppContext\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./FolderMain.css\";\r\n\r\nclass FolderMain extends Component {\r\n  static contextType = AppContext;\r\n\r\n  handleDeleteNote = (noteId) => {\r\n    const urlDelete = `http://localhost:9090/notes/${noteId}`;\r\n    fetch(urlDelete, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(response.status);\r\n        } else {\r\n          this.context.handleDeleteNote(noteId);\r\n        }\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  render() {\r\n    const { notes } = this.context;\r\n    let folderId = this.props.match.params.folderId;\r\n    const notesDisplayed = notes.filter((note) => note.folderId === folderId);\r\n    const noteArray = notesDisplayed.map((note) => {\r\n      let date = new Date(note.modified);\r\n      let dateNormalizer = format(date, \"do LLL yyyy\");\r\n\r\n      return (\r\n        <li className=\"note\" key={note.id}>\r\n          <div className=\"noteItem\">\r\n            <h2 className=\"noteName\">\r\n              <Link to={`/note/${note.id}`}>{note.name}</Link>\r\n            </h2>\r\n            <p>Last change: {dateNormalizer}</p>\r\n            <button\r\n              className=\"deleteNoteBtn\"\r\n              onClick={() => this.handleDeleteNote(note.id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"noteBox\">\r\n        {noteArray.length === 0 && <p>Folder Empty</p>}\r\n        <ul className=\"noteList\">{noteArray}</ul>\r\n        <Link to=\"/addNote\">\r\n          <button className=\"addNoteBtn\">Add Note</button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nFolderMain.propTypes = {\r\n  folderId: PropTypes.string\r\n}\r\n\r\nexport default FolderMain;\r\n","import React, { Component } from \"react\";\r\nimport { format } from \"date-fns\";\r\nimport PropTypes from \"prop-types\";\r\nimport AppContext from \"../AppContext\";\r\nimport \"./NoteMain.css\";\r\n\r\nclass NoteMain extends Component {\r\n  static contextType = AppContext;\r\n\r\n  handleDelete = (noteId) => {\r\n    const urlDelete = `http://localhost:9090/notes/${noteId}`;\r\n    fetch(urlDelete, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(response.status);\r\n        } else {\r\n          this.context.handleDeleteNote(noteId);\r\n        }\r\n      })\r\n      .then(() => this.props.history.goBack())\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  render() {\r\n    const { notes } = this.context;\r\n    const noteId = this.props.match.params.noteId;\r\n    let note = notes.find((note) => note.id === noteId) || {\r\n      id: noteId,\r\n      modified: new Date().toISOString(),\r\n    };\r\n\r\n    let date = new Date(note.modified);\r\n    let dateNormalizer = format(date, \"do LLL yyyy\");\r\n\r\n    return (\r\n      <section className=\"detailedNote\">\r\n        <div className=\"noteTitle\">\r\n          <h2>{note.name}</h2>\r\n        </div>\r\n        <div className=\"noteInfo\">\r\n          <p>Last change: {dateNormalizer}</p>\r\n        </div>\r\n        <div className=\"noteDetail\">{note.content}</div>\r\n        <button\r\n          className=\"deleteBtn\"\r\n          onClick={() => this.handleDelete(note.id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </section>\r\n    );\r\n  }\r\n};\r\n\r\nNoteMain.propTypes = {\r\n  noteId: PropTypes.string,\r\n};\r\n\r\nexport default NoteMain;\r\n","import React, { Component } from \"react\";\r\nimport AppContext from \"../AppContext\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./AddFolder.css\";\r\n\r\nclass AddFolder extends Component {\r\n  static defaultProps = {\r\n    history: { goBack: () => {} },\r\n  };\r\n  state = { folderName: \"\" };\r\n\r\n  static contextType = AppContext;\r\n\r\n  folderNameValue = (e) => {\r\n    this.setState({ folderName: e.target.value });\r\n  };\r\n\r\n  handleAddFolder = (e) => {\r\n    e.preventDefault();\r\n    const url = `http://localhost:9090/folders`;\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ name: this.state.folderName }),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          return response.json().then((event) => Promise.reject(event));\r\n        } else {\r\n          return response.json();\r\n        }\r\n      })\r\n      .then((responseJson) => {\r\n        this.context.handleAddFolder(responseJson);\r\n        this.setState({ folderName: \"\" });\r\n        this.props.history.goBack();\r\n      })\r\n      .catch(() => alert(\"Something went wrong\"));\r\n  };\r\n\r\n  folderValidator = () => {\r\n    if (this.state.folderName === \"\") {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  updateForm = (event) => {\r\n    this.setState({ [event.target.id]: event.target.value, touched: true });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"addFolderBox\">\r\n        <form\r\n          className=\"addFolderMenu\"\r\n          onSubmit={(e) => this.handleAddFolder(e)}\r\n        >\r\n          <label htmlFor=\"nameInput\">Folder Name</label>\r\n          <input\r\n            className=\"nameInput\"\r\n            name=\"nameInput\"\r\n            id=\"folderName\"\r\n            onChange={this.updateForm}\r\n          ></input>\r\n          {this.folderValidator() && this.state.touched && (\r\n            <p className=\"warningBox\">Don't forget to add a name!</p>\r\n          )}\r\n          <button className=\"submit\" disabled={this.folderValidator()}>\r\n            Add Folder\r\n          </button>\r\n        </form>\r\n        <button className=\"backBtn\" onClick={this.props.history.goBack}>\r\n          Go Back\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nAddFolder.propTypes = {\r\n  folderName: PropTypes.string,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default AddFolder;\r\n","import React, { Component } from \"react\";\r\nimport AppContext from \"../AppContext\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./AddNote.css\";\r\n\r\nclass AddNote extends Component {\r\n  static defaultProps = {\r\n    history: { goBack: () => {} },\r\n  };\r\n  state = {\r\n    name: \"\",\r\n    content: \"\",\r\n    folderId: \"\",\r\n    modified: \"\",\r\n    touched: false,\r\n  };\r\n\r\n  static contextType = AppContext;\r\n\r\n  updateForm = (event) => {\r\n    this.setState({ [event.target.id]: event.target.value, touched: true });\r\n  };\r\n\r\n  handleAddNote = (e) => {\r\n    e.preventDefault();\r\n    const url = `http://localhost:9090/notes`;\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        name: this.state.name,\r\n        content: this.state.content,\r\n        folderId: this.state.folderId,\r\n        modified: this.state.modified,\r\n      }),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          return response.json().then((event) => Promise.reject(event));\r\n        } else {\r\n          return response.json();\r\n        }\r\n      })\r\n      .then((responseJson) => {\r\n        this.context.handleAddNote(responseJson);\r\n        this.props.history.goBack();\r\n      })\r\n      .catch(() =>\r\n        alert(\r\n          \"Oh dang, you were never supposed to see this page...this is awkward, please refresh the page.\"\r\n        )\r\n      );\r\n  };\r\n\r\n  folderOptions = () => {\r\n    let options = this.context.folders.map((folder) => {\r\n      return (\r\n        <option key={folder.id} value={folder.id}>\r\n          {folder.name}\r\n        </option>\r\n      );\r\n    });\r\n    return options;\r\n  };\r\n\r\n  handleModified = () => {\r\n    let today = new Date();\r\n    let iso = today.toISOString();\r\n    this.setState({ modified: iso });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.handleModified();\r\n  };\r\n\r\n  nameValidator = () => {\r\n    if (this.state.name === \"\") {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  contentValidator = () => {\r\n    if (this.state.content === \"\") {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  folderValidator = () => {\r\n    if (this.state.folderId === \"\") {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"addNoteBox\">\r\n        <form className=\"addNoteMenu\" onSubmit={(e) => this.handleAddNote(e)}>\r\n          <label htmlFor=\"noteNameInput\">Note Name:</label>\r\n          <input\r\n            className=\"noteNameInput\"\r\n            id=\"name\"\r\n            name=\"noteNameInput\"\r\n            placeholder=\"Enter name here\"\r\n            onChange={(e) => this.updateForm(e)}\r\n          ></input>\r\n          {this.nameValidator() && this.state.touched && (\r\n            <p className=\"warningBox\">Don't forget to add a name!</p>\r\n          )}\r\n          <label htmlFor=\"noteDetail\">Note Details:</label>\r\n          <textarea\r\n            className=\"noteDetail\"\r\n            id=\"content\"\r\n            name=\"noteDetail\"\r\n            rows=\"4\"\r\n            cols=\"50\"\r\n            placeholder=\"Put note details here\"\r\n            onChange={(e) => this.updateForm(e)}\r\n          ></textarea>\r\n          <select\r\n            name=\"folder\"\r\n            id=\"folderId\"\r\n            onChange={(e) => this.updateForm(e)}\r\n          >\r\n            <option>Select Folder</option>\r\n            {this.folderOptions()}\r\n          </select>\r\n          <div>\r\n            <button\r\n              className=\"submitNote\"\r\n              disabled={\r\n                this.nameValidator() ||\r\n                this.contentValidator() ||\r\n                this.folderValidator()\r\n              }\r\n            >\r\n              Submit Note\r\n            </button>\r\n          </div>\r\n        </form>\r\n        <button className=\"backBtn\" onClick={this.props.history.goBack}>\r\n          Go Back\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nAddNote.propTypes = {\r\n  name: PropTypes.string,\r\n  content: PropTypes.string, \r\n  folderId: PropTypes.string,\r\n  modified: PropTypes.string,\r\n  touched: PropTypes.bool,\r\n};\r\n\r\nexport default AddNote;\r\n","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass FolderListError extends Component {\r\n  state = { hasError: false };\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true };\r\n  };\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <div className=\"errorBox\">\r\n          <p>Oh no! your folders aren't here...Try refreshing the page.</p>\r\n        </div>\r\n      );\r\n    }\r\n    return this.props.children;\r\n  }\r\n};\r\n\r\nFolderListError.propTypes = {\r\n  hasError: PropTypes.string\r\n}\r\n\r\nexport default withRouter(FolderListError);\r\n","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nclass NoteListError extends Component {\r\n  state = { hasError: false };\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <div className=\"errorBox\">\r\n          <p>Oh no! your notes aren't here...Try refreshing the page.</p>\r\n        </div>\r\n      );\r\n    }\r\n    return this.props.children;\r\n  }\r\n};\r\n\r\nNoteListError.propTypes = {\r\n  hasError: PropTypes.bool\r\n}\r\n\r\nexport default withRouter(NoteListError);\r\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport PropTypes from \"prop-types\"\nimport Header from \"./Components/Header\";\nimport FolderListMain from \"./Components/FolderListMain\";\nimport NoteListMain from \"./Components/NoteListMain\";\nimport FolderSideBar from \"./Components/FolderSideBar\";\nimport NoteSideBar from \"./Components/NoteSideBar\";\nimport FolderMain from \"./Components/FolderMain\";\nimport NoteMain from \"./Components/NoteMain\";\nimport AppContext from \"./AppContext\";\nimport AddFolder from \"./Components/AddFolder\";\nimport AddNote from \"./Components/AddNote\";\nimport FolderListError from \"./Components/FolderListError\";\nimport NoteListError from \"./Components/NoteListError\";\n\nclass App extends Component {\n  state = {\n    folders: [],\n    notes: [],\n  };\n\n  fetchFolders = () => {\n    let url = \"http://localhost:9090/folders\";\n    fetch(url)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error(response.status);\n      })\n      .then((data) => {\n        this.setState({ folders: data });\n      })\n      .catch((error) => console.log(error.message));\n  };\n\n  fetchNotes = () => {\n    let url = \"http://localhost:9090/notes\";\n    fetch(url)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error(response.status);\n      })\n      .then((data) => {\n        this.setState({ notes: data });\n      })\n      .catch((error) => console.log(error.message));\n  };\n\n  handleDeleteNote = (noteId) => {\n    let filteredNotes = this.state.notes.filter((note) => note.id !== noteId);\n    this.setState({ notes: filteredNotes });\n  };\n\n  handleAddFolder = (folder) => {\n    this.setState({ folders: [...this.state.folders, folder] });\n  };\n\n  handleAddNote = (note) => {\n    this.setState({ notes: [...this.state.notes, note] });\n  };\n\n  componentDidMount() {\n    this.fetchFolders();\n    this.fetchNotes();\n  }\n\n  render() {\n    return (\n      <main className=\"App\">\n        <Header />\n        <AppContext.Provider\n          value={{\n            folders: this.state.folders,\n            notes: this.state.notes,\n            handleDeleteNote: this.handleDeleteNote,\n            handleAddFolder: this.handleAddFolder,\n            handleAddNote: this.handleAddNote,\n          }}\n        >\n          <Switch>\n            <Route path=\"/addFolder\" exact component={AddFolder} />\n            <Route path=\"/addNote\" exact component={AddNote} />\n            <React.Fragment>\n              <div className=\"bodyBox\">\n                <section className=\"sideBarBox\">\n                  <FolderListError>\n                    <Route path=\"/\" exact component={FolderListMain} />\n                    <Route path=\"/folder/:folderId\" component={FolderSideBar} />\n                    <Route path=\"/note/:noteId\" component={NoteSideBar} />\n                  </FolderListError>\n                </section>\n                <section className=\"noteViewBox\">\n                  <NoteListError>\n                    <Route path=\"/\" exact component={NoteListMain} />\n                    <Route path=\"/folder/:folderId\" component={FolderMain} />\n                    <Route path=\"/note/:noteId\" component={NoteMain} />\n                  </NoteListError>\n                </section>\n              </div>\n            </React.Fragment>\n          </Switch>\n        </AppContext.Provider>\n      </main>\n    );\n  }\n};\n\nApp.propTypes = {\n  folders: PropTypes.array,\n  notes: PropTypes.array,\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\n   <BrowserRouter>\n    <App />\n   </BrowserRouter>,\n  document.getElementById('root')\n);"],"sourceRoot":""}